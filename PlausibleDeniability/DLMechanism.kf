// This program demonstrates the use of the Discrete Laplace
// Mechanism for providing ε-dp on a counting query on a 
// database with N entries

// Discrete Laplace Distribution
// Input: Sensitivity Delta > 0, Privacy parameter ε > 0.
// Output: Z = one sample from Lap_Z(t)
// t = ∆/ε used in the Laplace Mechanism to provide ε-dp

Delta = 1;
ε = 0.5;
t = Delta/ε;

B = 1;
U = 0;
V = 0;
i = 0;

while (i < 10):
  t1 = 0 if (B == 1) && (U == 0) && (V == 0) else 1;

  // Loop to calculate the probability distribution for U in GenerateU.kf
  U <- (0 [0.622459] 1) if t1 == 0 else U; // t = 1
  // U <- ([ 0.0 @ 0.448441
  //     , 1.0 @ 0.321322
  //     , 2.0 @ 0.230237 ]) if t1 == 0 else U; // t = 2

  // Loop to calculate the probability distribution for V in GenerateV.kf
  V <- ([ 0.0 @ 0.632121
      , 1.0 @ 0.232544
      , 2.0 @ 0.085548
      , 3.0 @ 0.031471
      , 4.0 @ 0.011578
      , 5.0 @ 0.004259
      , 6.0 @ 0.001567
      , 7.0 @ 0.000576
      , 8.0 @ 0.000212
      , 9.0 @ 0.000078
      , 10.0@ 0.000046 ]) if t1 == 0 else V;

  B <- (1 [0.5] 0) if t1 == 0 else B;
  i++;

Z = (1-(2*B))*(U+(t*V)); // Lap_Z(t) sample



// Create database
count = 0;
Resps = [1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0];
resp <- uniform [0, 1];
Resps.append(resp);

for r in Resps:
  count = count + r;

noisyCount = count + Z;
leak(noisyCount);

// N = 5; // Set N to number of entries
// k = 0;
// Resps = [];
// count = 0;
// while k < N:
//  resp <- uniform [0, 1];
//  // Resps.append(resp);
//  count <- count + resp;
//  k++;

// noisyCount = count + Z;
// leak(noisyCount);